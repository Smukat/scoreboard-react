{"version":3,"sources":["components/Stats.js","components/Stopwatch.js","components/Header.js","components/Counter.js","components/Icon.js","components/Player.js","components/AddPlayerForm.js","App.js","serviceWorker.js","index.js"],"names":["Stats","props","totalPlayers","players","length","totalPoints","reduce","total","player","score","react_default","a","createElement","className","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","_this","now","Date","setState","prevState","handleStopwatch","handleReset","_this2","this","intervalID","setInterval","clearInterval","seconds","Math","floor","onClick","Component","Header","_ref","title","components_Stats","components_Stopwatch","defaultProps","Counter","index","changeScore","Icon","viewBox","isHighScore","d","transform","width","height","Player","_this$props","name","id","removePlayer","components_Icon","components_Counter","PureComponent","AddPlayerForm","playerInput","React","createRef","handleSubmit","e","preventDefault","addPlayer","current","value","currentTarget","reset","onSubmit","type","ref","placeholder","App","prevPlayerId","getHighScore","scores","map","p","highScore","max","apply","Object","toConsumableArray","handleScoreChange","delta","handleAddPlayer","concat","handleRemovePlayer","filter","console","log","components_Header","components_Player","key","toString","components_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2b26c5f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Stats = (props) => {\r\n \r\n  const totalPlayers = props.players.length;\r\n  const totalPoints = props.players.reduce( (total, player) => {\r\n    return total + player.score;\r\n  }, 0);\r\n\r\n  return (\r\n    <table className=\"stats\">\r\n      <tbody>\r\n        <tr>\r\n          <td>Players:</td>\r\n          <td>{ totalPlayers }</td>\r\n        </tr>\r\n        <tr>\r\n          <td>Total Points:</td>\r\n          <td>{ totalPoints }</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nStats.propTypes = {\r\n  players: PropTypes.arrayOf(PropTypes.shape({\r\n    score: PropTypes.number,\r\n  })).isRequired,\r\n  \r\n\r\n};\r\n\r\nexport default Stats;","import React, { Component } from 'react';\r\n\r\nclass Stopwatch extends Component {\r\n\r\n  state = {\r\n    isRunning: false,\r\n    elapsedTime: 0,\r\n    previousTime: 0\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(() => this.tick(), 100);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  tick = () => {\r\n    if (this.state.isRunning) {\r\n      const now = Date.now();\r\n      this.setState( prevState => ({\r\n        previousTime: now,\r\n        elapsedTime: prevState.elapsedTime + (now - this.state.previousTime)\r\n      }));\r\n    }\r\n  }\r\n  \r\n  handleStopwatch = () => {\r\n    this.setState( prevState => ({\r\n      isRunning: !prevState.isRunning\r\n    }));\r\n    if (!this.state.isRunning) {\r\n      this.setState({ previousTime: Date.now() });\r\n    }\r\n  }\r\n\r\n  handleReset = () => {\r\n    this.setState({ elapsedTime: 0 });\r\n  }\r\n\r\n  render() {\r\n    const seconds = Math.floor(this.state.elapsedTime / 1000);\r\n\r\n    return (\r\n      <div className=\"stopwatch\">\r\n        <h2>Stopwatch</h2>\r\n        <span className=\"stopwatch-time\">{ seconds }</span>\r\n        <button onClick={this.handleStopwatch}>\r\n          { this.state.isRunning ? 'Stop' : 'Start' }\r\n        </button>\r\n        <button onClick={this.handleReset}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Stats from './Stats';\r\nimport Stopwatch from './Stopwatch';\r\n\r\nconst Header = ({ players, title }) => {\r\n  return (\r\n    <header>\r\n      <Stats players={players} />\r\n      <h1>{ title }</h1>\r\n      <Stopwatch />\r\n    </header>\r\n  );\r\n}\r\n\r\nHeader.propTypes = {\r\n  title: PropTypes.string,\r\n  players: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nHeader.defaultProps = {\r\n  title: 'Scoreboard'\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Counter = ({ index, score, changeScore }) => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <button className=\"counter-action decrement\" onClick={() => changeScore(index, -1)}> - </button>\r\n      <span className=\"counter-score\">{ score }</span>\r\n      <button className=\"counter-action increment\" onClick={() => changeScore(index, 1)}> + </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nCounter.propTypes = {\r\n  index: PropTypes.number,\r\n  score: PropTypes.number,\r\n  changeScore: PropTypes.func  \r\n};\r\n\r\nexport default Counter;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Icon = (props) =>\r\n  <svg viewBox=\"0 0 44 35\" className={ props.isHighScore ? 'is-high-score' : null }>\r\n    <path d=\"M26.7616 10.6207L21.8192 0L16.9973 10.5603C15.3699 14.1207 10.9096 15.2672 7.77534 12.9741L0 7.24138L6.56986 28.8448H37.0685L43.5781 7.72414L35.7425 13.0948C32.6685 15.2672 28.3288 14.0603 26.7616 10.6207Z\" transform=\"translate(0 0.301727)\"/>\r\n    <rect width=\"30.4986\" height=\"3.07759\" transform=\"translate(6.56987 31.5603)\"/>\r\n  </svg>;\r\n\r\nIcon.propTypes = {\r\n  isHighScore: PropTypes.bool\r\n};\r\n\r\nexport default Icon;","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Counter from './Counter';\r\nimport Icon from './Icon';\r\n\r\nclass Player extends PureComponent {\r\n\r\n  static propTypes = {\r\n    changeScore: PropTypes.func.isRequired,\r\n    removePlayer: PropTypes.func.isRequired,\r\n    isHighScore: PropTypes.bool.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    score: PropTypes.number.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n    index: PropTypes.number.isRequired,\r\n    \r\n  };\r\n\r\n  render() {\r\n    \r\n    const { \r\n      name,\r\n      id,\r\n      score,\r\n      index,\r\n      removePlayer,\r\n      changeScore,\r\n      isHighScore,\r\n    } = this.props;\r\n\r\n    return (\r\n      <div className=\"player\">\r\n        <span className=\"player-name\">\r\n          <button className=\"remove-player\" onClick={() => removePlayer(id)}>✖</button>\r\n          \r\n          <Icon isHighScore={isHighScore} />\r\n          { name }\r\n        </span>\r\n  \r\n        <Counter \r\n          score={score}\r\n          index={index}\r\n          changeScore={changeScore} \r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass AddPlayerForm extends Component {\r\n\r\n  static propTypes = {\r\n    addPlayer: PropTypes.func\r\n  };\r\n\r\n  playerInput = React.createRef();\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addPlayer(this.playerInput.current.value);\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input \r\n          type=\"text\"\r\n          ref={this.playerInput}\r\n          placeholder=\"Enter a player's name\"\r\n        />\r\n        \r\n        <input \r\n          type=\"submit\"\r\n          value=\"Add Player\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddPlayerForm;","import React, { Component } from 'react';\r\nimport Header from './components/Header';\r\nimport Player from './components/Player';\r\nimport AddPlayerForm from './components/AddPlayerForm';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    players: [\r\n      {\r\n        name: \"Jesica\",\r\n        score: 0,\r\n        id: 1\r\n      },\r\n      {\r\n        name: \"Gauss\",\r\n        score: 0,\r\n        id: 2\r\n      },\r\n      {\r\n        name: \"Amelie\",\r\n        score: 0,\r\n        id: 3\r\n      },\r\n      {\r\n        name: \"Kero\",\r\n        score: 0,\r\n        id: 4\r\n      }\r\n    ]\r\n  };\r\n\r\n  // player id counter\r\n  prevPlayerId = 4;\r\n\r\n  getHighScore = () => {\r\n    const scores = this.state.players.map( p => p.score );\r\n    const highScore = Math.max(...scores);\r\n    return (highScore) ? highScore : null;\r\n  }\r\n\r\n  handleScoreChange = (index, delta) => {\r\n    this.setState( prevState => ({\r\n      score: prevState.players[index].score += delta\r\n    }));\r\n  }\r\n\r\n  handleAddPlayer = (name) => {\r\n    this.setState( prevState => {\r\n      return {\r\n        players: [\r\n          ...prevState.players,\r\n          {\r\n            name,\r\n            score: 0,\r\n            id: this.prevPlayerId += 1,\r\n          }\r\n        ]\r\n      };\r\n    });\r\n  }\r\n\r\n  handleRemovePlayer = (id) => {\r\n    this.setState( prevState => {\r\n      return {\r\n        players: prevState.players.filter(p => p.id !== id)\r\n      };\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const highScore = this.getHighScore();\r\n    console.log(highScore);\r\n    console.log(\"Hello\");\r\n    \r\n    return (\r\n      <div className=\"scoreboard\">\r\n        <Header players={this.state.players} />\r\n  \r\n        {/* Players list */}\r\n        {this.state.players.map( (player, index) =>\r\n          <Player \r\n            name={player.name}\r\n            score={player.score}\r\n            id={player.id}\r\n            key={player.id.toString()} \r\n            index={index}\r\n            changeScore={this.handleScoreChange}\r\n            removePlayer={this.handleRemovePlayer}\r\n            isHighScore={highScore === player.score}         \r\n          />\r\n        )}\r\n\r\n        <AddPlayerForm addPlayer={this.handleAddPlayer} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}